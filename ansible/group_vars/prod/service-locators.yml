---

#     ~~~   PROD   ~~~

# Variables used to locate services.
# These values are only used in prod.  If you can dynamically calculate the value, please do so, and
# place it in roles/common/defaults/service-locators.yml

ldap_urls:
  - ldaps://10.119.0.20
  - ldaps://10.119.0.21

aws_upstream_dns: 10.167.32.2

#-------------------------------------------------------------#
#                   Application Specific Config
#-------------------------------------------------------------#
# Use sbac live parser for SSO
auth_oauth2_identity_parser: smarter_common.security.sbac_live_identity_parser.SbacOauthIdentityParser
sso_oauth_verify_url: https://sso.smarterbalanced.org/auth/oauth2/tokeninfo?realm=/sbac
auth_saml_identity_parser: smarter_common.security.sbac_live_identity_parser.SbacIdentityParser
auth_policy_secure: True
sso_saml_login_url: https://sso.smarterbalanced.org/auth/SSORedirect/metaAlias/sbac/idp
sso_saml_logout_url: https://sso.smarterbalanced.org/auth/IDPSloRedirect/metaAlias/sbac/idp
sso_saml_issuer_name: https://reporting.smarterbalanced.org
hpz_sso_saml_issuer_name: https://reportdownload.smarterbalanced.org
sso_saml_name_qualifier: https://sso.smarterbalanced.org/auth
reporting_base_url_host: https://reporting.smarterbalanced.org 
hpz_upload_base_url: https://reportdownload.smarterbalanced.org:8443
hpz_download_base_url: https://reportdownload.smarterbalanced.org
hpz_ignore_certificate: False
disable_stack_trace: True
tsb_gpg_public_key: sbac@smarterbalanced.org

# The following are probably not used and need to be cleaned up from smarter.ini
extract_keyserver_host: NotUsed
pickup_host: NotUsed
sftp_remote_lz_host: NotUsed

#===============================================================#
#                    COMMON TO ALL ENVS
#              TODO: push this out to a file and DRY this up
#===============================================================#




# Everything here is generic accross environments - if you need to hardcode something to an environment, see
# SEE ALSO: group_vars/<envname>/service-lcoators.yml

#-------------------------------------------------------------#
#                   Internal Services
#            that could be dynamically looked up
#-------------------------------------------------------------#
locals: "{{ groups[ ec2_tag_environment ] }}" # concise
bind_host: "{{groups.get('bind', []) | intersect(locals) | first | default('127.0.0.1')}}"
dns_search_domain: "{{ ec2_tag_environment }}.ae1.sbac2dc.net"
loghost: "{{groups.get('loghost', []) | intersect(locals) | first | default('127.0.0.1')}}"
loghost_port: 10514 


domain: "{{ dns_search_domain }}" # concise


# All of the lookups below are just doing this:
# groups.get('extracts-db-pgpool'] # List of IPs of all instances of that app type
# groups.get('extracts-db-pgpool', []) | intersect(locals) # IPs of instances of that app type in the same environment as me
# groups.get('extracts-db-pgpool', []) | intersect(locals) | first # First IP of any instance of that app type in the same environment as me
# hostvars[(groups.get('extracts-db-pgpool', []) | intersect(locals) | first)] All vars defined for that IP
# hostvars[(groups.get('extracts-db-pgpool', []) | intersect(locals) | first))['ec2_tag_Name'] EC2 tag 'Name' == DNS shortname

#-------------------------------------------------------------#
#                   Internal Services
#-------------------------------------------------------------#
# These hostnames are machines in our VPC that have registered their names in BIND. 
# "should" be able to rely on local DNS without having to change these values.

reporting_slave_dbs: "{{ groups.get('reporting-db-slave', []) | intersect(locals) }}"
extract_slave_dbs: "{{ groups.get('reporting-db-slave', []) | intersect(locals) }}" #Change to extract slaves later
edware_db_ca_host: "{{ hostvars | srl_hostvars_lookup((groups.get('reporting-db-pgpool', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}" # TODO: multi-tenancy 
edware_extract_db_ca_host: "{{ hostvars | srl_hostvars_lookup((groups.get('extracts-db-pgpool', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}" # TODO: multi-tenancy
edware_repmgr_db_host : "{{ hostvars | srl_hostvars_lookup((groups.get('db-master', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
edware_stats_db_host: "{{ hostvars | srl_hostvars_lookup((groups.get('stats-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
migrate_dest_db_ca_host: "{{ hostvars | srl_hostvars_lookup((groups.get('db-master', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}" # TODO: multi-tenancy
migrate_pg_pool_host: "{{ hostvars | srl_hostvars_lookup((groups.get('reporting-db-pgpool', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
migrate_rabbit_host: "{{ hostvars | srl_hostvars_lookup((groups.get('migrate-rabbit', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
migrate_source_db_ca_host: "{{ hostvars | srl_hostvars_lookup((groups.get('migrate-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}" # TODO: multi-tenancy 
reporting_rabbit_services_host: "{{ hostvars | srl_hostvars_lookup((groups.get('reporting-rabbit-services', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
reporting_rabbit_extract_host: "{{ hostvars | srl_hostvars_lookup((groups.get('reporting-rabbit-extract', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
lz_host: "{{ hostvars | srl_hostvars_lookup((groups.get('lz', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
tsb_trigger_host: "{{ hostvars | srl_hostvars_lookup((groups.get('tsb-trigger', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
staging_db_ca_host: "{{ hostvars | srl_hostvars_lookup((groups.get('migrate-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
udl_db_host: "{{ hostvars | srl_hostvars_lookup((groups.get('udl-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
udl_rabbit_host: "{{ hostvars | srl_hostvars_lookup((groups.get('udl-rabbit', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
tsb_rabbit_host: "{{ hostvars | srl_hostvars_lookup((groups.get('tsb-rabbit', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
tsb_db_host: "{{ hostvars | srl_hostvars_lookup((groups.get('tsb-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
hpz_db_host: "{{ hostvars | srl_hostvars_lookup((groups.get('hpz-db', []) | intersect(locals) | first))['ec2_tag_Name'] }}.{{ domain }}"
yum_env: "prod"

# gluster-server 
# TODO: need to figure out why there are two vars
# TODO: not used - check melvin's mount code
gluster_server_1: "srl-gluster-1.{{ domain }}"
gluster_server_2: "srl-gluster-2.{{ domain }}"

#-------------------------------------------------------------#
#                   Application Specific Config
#-------------------------------------------------------------#
cache_hosts: "{{ groups.get('memcached', [])  | intersect(locals) | append_to_each(':11211') | join(';') }}"





