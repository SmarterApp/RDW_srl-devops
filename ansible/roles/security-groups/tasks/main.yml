- name: srl-ssh-intra-vpc security group
  ec2_group:
    name: srl-ssh-intra-vpc
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSH from any node in the AWS VPC
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 0.0.0.0/0
    purge_rules: true
    purge_rules_egress: true
- name: srl-ssh-from-amplify
  ec2_group:
    name: srl-ssh-from-amplify
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSH access from the Amplify DUMBO office and Amplify VPN egress
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 38.117.157.251/32   # EOT DUMBO Office NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 38.117.159.162/32   # EOT DUMBO Office NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 38.117.158.238/32   # EOT fwDumboDev NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 38.125.8.66/32      # EOT rtDumboOpenVPN NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 66.104.227.162/32   # XO DUMBO Office NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 66.104.227.163/32   # XO DUMBO Office NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 66.104.227.180/32   # XO fwDumboDev NAT
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 66.104.227.181/32   # XO rtDumboOpenVPN NAT
    rules_egress:
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 0.0.0.0/0
    purge_rules: true
    purge_rules_egress: true
- name: srl-ssh-from-vestibule
  ec2_group:
    name: srl-ssh-from-vestibule
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSH access from the production Vestibule jumpbox
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.119.4.0/24 # Insight group's vestibule is on this CIDR.  Tunnelled to AWS through the VPN node.
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-ssh-from-anywhere
  ec2_group:
    name: srl-ssh-from-anywhere
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSH access from anywhere.  Intended for LZ.
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
    
- name: srl-ssh-from-ucla
  ec2_group:
    name: srl-ssh-from-ucla
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSH access from UCLA trusted networks.
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 164.67.133.0/24
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 164.67.203.64/26
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 149.142.38.64/26
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
    
- name: srl-bind security group
  ec2_group:
    name: srl-bind
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: BIND Servers
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: udp 
        from_port: 53
        to_port: 53
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
- name: srl-db security group
  ec2_group:
    name: srl-db
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: DB Servers
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 5432
        to_port: 5432
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-db-client security group
  ec2_group:
    name: srl-db-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow DB client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 5432
        to_port: 5432
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-db-pgbouncer security group
  ec2_group:
    name: srl-db-pgbouncer
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow pgbouncer client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 6432
        to_port: 6432
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 9999
        to_port: 9999
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-db-pool security group
  ec2_group:
    name: srl-db-pool
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow DB Pool access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 9898
        to_port: 9898
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 9999
        to_port: 9999
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 9898
        to_port: 9898
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 9999
        to_port: 9999
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-db-pool-client security group
  ec2_group:
    name: srl-db-pool-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow DB Pool client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 6432
        to_port: 6432
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-db-pool-pcp security group
  ec2_group:
    name: srl-db-pool-pcp
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow DB Pool PCP access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 9898
        to_port: 9898
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-glusterfs security group
  ec2_group:
    name: srl-glusterfs
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow GlusterFS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49152
        to_port: 49164
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49152
        to_port: 49164
        cidr_ip: "{{ vpc_cidr_block }}"
      
    purge_rules: true
    purge_rules_egress: true
- name: srl-glusterfs-pdf-client security group
  ec2_group:
    name: srl-glusterfs-pdf-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow GlusterFS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49162
        to_port: 49163
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49162
        to_port: 49163
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-glusterfs-extract-client security group
  ec2_group:
    name: srl-glusterfs-extract-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow GlusterFS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49152
        to_port: 49155
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49152
        to_port: 49155
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-glusterfs-udl-client security group
  ec2_group:
    name: srl-glusterfs-udl-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow GlusterFS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49156
        to_port: 49156
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49157
        to_port: 49157
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49156
        to_port: 49156
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49157
        to_port: 49157
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-glusterfs-hpz-client security group
  ec2_group:
    name: srl-glusterfs-hpz-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow GlusterFS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49158
        to_port: 49158
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49159
        to_port: 49159
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 111
        to_port: 111
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 24007
        to_port: 24007
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49158
        to_port: 49158
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 49159
        to_port: 49159
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true

- name: srl-sensu-api security group
  ec2_group:
    name: srl-sensu-api
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow access to the Sensu API port
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 4567
        to_port: 4567
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true

- name: srl-graphite security group
  ec2_group:
    name: srl-graphite
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow access to the carbon-query and Graphite HTTPS
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 7002  # carbon cache query port
        to_port: 7002
        cidr_ip: "{{ vpc_cidr_block }}"        
    rules_egress:
    purge_rules: true
    purge_rules_egress: true

- name: srl-logging security group
  ec2_group:
    name: srl-logging
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow Log Server client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 10514
        to_port: 10514
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-logstash security group
  ec2_group:
    name: srl-logstash
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow Log Server access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 9200
        to_port: 9200
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 10514
        to_port: 10514
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 5601 
        to_port: 5601 
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-memcached security group
  ec2_group:
    name: srl-memcached
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow Memcache access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 11211
        to_port: 11211
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 11211
        to_port: 11211
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-nat security group
  ec2_group:
    name: srl-nat
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow private subnet access to NAT for external inet traffic
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: "{{ vpc_cidr_block }}" # TODO: this could be tightened to just the BIND server; but chicken-and-egg problem
      - proto: udp
        from_port: 123
        to_port: 123
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 465
        to_port: 465
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: tcp
        from_port: 80 
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 123
        to_port: 123
        cidr_ip: 0.0.0.0/0 # TODO: AWS throws an error when multiple rules use the same port.  # 129.6.15.28/24 # time-a.nist.gov IP 24.56.178.140/24 #www.nist.gov IP
      - proto: tcp
        from_port: 465
        to_port: 465
        cidr_ip: 0.0.0.0/0 #TODO: Limit to just Amazon's SES IPs
    purge_rules: true
    purge_rules_egress: true
- name: srl-rmq security group
  ec2_group:
    name: srl-rmq
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow RabbitMQ access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 4369
        to_port: 4369
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 5671
        to_port: 5671
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-rmq-client security group
  ec2_group:
    name: srl-rmq-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow RabbitMQ client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 5671
        to_port: 5671
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-sso-client security group
  ec2_group:
    name: srl-sso-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow SSO client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: "{{ vpc_cidr_block }}"
    purge_rules: true
    purge_rules_egress: true
- name: srl-web security group
  ec2_group:
    name: srl-web
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow web server access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-web-client security group
  ec2_group:
    name: srl-web-client
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow web server client access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/8
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/8
    purge_rules: true
    purge_rules_egress: true
- name: srl-ssh-from-omniti security group
  ec2_group:
    name: srl-ssh-from-omniti
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allows SSH from the contractor OmniTI, from their TFA VPN egress
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 108.48.124.82/32
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 108.48.124.83/32
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 108.48.124.84/32
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 108.48.124.85/32
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 108.48.124.86/32
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-elb-hpz
  ec2_group:
    name: srl-elb-hpz
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow ELB 8443 access internally for hpz-web 
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 8443 
        to_port: 8443
        cidr_ip: 54.165.82.75/32 #Prod NAT, template out for dev # TODO
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: 54.175.150.30/32 #Prod NAT, template out for dev # TODO
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-hpz-web
  ec2_group:
    name: srl-hpz-web
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow 8443 access internally for hpz-web
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-vpn-from-vestibule
  ec2_group:
    name: srl-vpn-inbound
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allows incoming VPN connection from the Vestibule public IP (Equivalent of SBAC2-base-environment-VPNAccess-1R2RY80NN0FV0)
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 50080
        to_port: 50080
        cidr_ip: 64.106.129.100/32 # Public IP of Vestibule
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-elb security group
  ec2_group:
    name: srl-elb
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow ELB HTTP and HTTPS access
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 10.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 10.0.0.0/0
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
  ignore_errors: yes   # TODO: AWS API auto-adds a 0.0.0.0/0 80->80 rule, and it doesn't get purged; when we re-submit it, it results in a 400 Duplicate Error.
- name: srl-kibana-from-vestibule 
  ec2_group:
    name: srl-kibana-from-vestibule
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow Kibana access from production Vestibule machine 
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: tcp
        from_port: 5601 
        to_port: 5601 
        cidr_ip: 10.119.4.0/24 
    rules_egress:
    purge_rules: true
    purge_rules_egress: true
- name: srl-ntp-server
  ec2_group:
    name: srl-ntp-server
    aws_access_key: "{{ aws_access_id }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Allow internal ntp queries to the bind server 
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    rules:
      - proto: udp 
        from_port: 123 
        to_port: 123 
        cidr_ip: "{{ vpc_cidr_block }}" 
    rules_egress:
    purge_rules: true
    purge_rules_egress: true

