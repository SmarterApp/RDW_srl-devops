---

- name: Require rabbitmq_password
  fail:
    msg: "You must provide the 'rabbitmq_monitoring_password' variable in the group_vars/$ENV/secrets.yml file"
  when: rabbitmq_monitoring_password is not defined

- name: Require rabbitmq_ssl_s3_bucket
  fail:
    msg: "You must provide the 'rabbitmq_ssl_s3_bucket' variable, either via a playbook variable or via the -e option"
  when: rabbitmq_ssl_s3_bucket is not defined

- name: Install RabbitMQ
  yum:
    state: present
    name: "rabbitmq-server-{{ rabbitmq_rpm_version }}"

- name: Create SSL dir
  file: 
    state: directory
    path: /etc/rabbitmq/ssl
    owner: rabbitmq
    mode: 0700

- name: Install SSL Certs
  shell: "/usr/local/bin/aws s3 sync --sse s3://{{ rabbitmq_ssl_s3_bucket }}/rabbitmq /etc/rabbitmq/ssl "
  register: rmq_s3_sync
  changed_when: "rmq_s3_sync.stdout != ''"
  notify:
    - chown ssl certs
    - restart rabbit
    
- name: RabbitMQ config file
  template:
    src: rabbitmq.config.j2
    dest: /etc/rabbitmq/rabbitmq.config
  notify:
    - restart rabbit

- name: RabbitMQ env file
  template:
    src: rabbitmq-env.conf.j2
    dest: /etc/rabbitmq/rabbitmq-env.conf
  notify:
    - restart rabbit

- name: Enable/Start RMQ service
  service:
    name: rabbitmq-server
    enabled: yes
    state: started

- name: Check for management plugin
  shell: rabbitmq-plugins list -E | grep -q rabbitmq_management
  register: rmq_management_plugin_check
  changed_when: false
  failed_when: false

- name: Enable Mangement Plugin
  shell: rabbitmq-plugins enable rabbitmq_management
  when: rmq_management_plugin_check | failed

- name: Check for monitoring user
  shell: "rabbitmqctl -q list_users | grep -q {{ rabbitmq_monitoring_username }}"
  register: rabbitmq_monitoring_user_detected
  changed_when: false
  failed_when: false

- name: Create monitoring user
  shell: "rabbitmqctl add_user '{{ rabbitmq_monitoring_username }}' '{{ rabbitmq_monitoring_password }}'"
  when: rabbitmq_monitoring_user_detected | failed

- name: Tag monitoring user 
  shell: "rabbitmqctl set_user_tags {{ rabbitmq_monitoring_username }} monitoring "
  when: rabbitmq_monitoring_user_detected | failed

- name: Set monitoring user perms
  shell: "rabbitmqctl set_permissions -p {{ vhost_name }} {{ rabbitmq_monitoring_username }} '^$' '^$' '.*' "
  when: rabbitmq_monitoring_user_detected | failed
  
- name: Check for guest user
  shell: "rabbitmqctl -q list_users | grep -q guest"
  register: rabbitmq_guest_user_detected
  changed_when: false
  failed_when: false

- name: Delete guest user
  shell: "rabbitmqctl delete_user guest"
  when: rabbitmq_guest_user_detected | success

- name: Require rabbitmq_password
  fail:
    msg: "You must provide the 'rabbitmq_password' variable in the group_vars/$ENV/secrets.yml file"
  when: rabbitmq_password is not defined

- name: Check for user
  shell: "rabbitmqctl -q list_users | grep -q '{{ rabbitmq_username }}'"
  register: rabbitmq_user_detected
  changed_when: false
  failed_when: false

- name: Create user
  shell: "rabbitmqctl add_user '{{ rabbitmq_username }}' '{{ rabbitmq_password }}'"
  when: rabbitmq_user_detected | failed

- name: Check for vhost
  shell: "rabbitmqctl -q list_vhosts | egrep -q '^{{ vhost_name }}$'"
  register: rabbitmq_vhost_detected
  changed_when: false
  failed_when: false

- name: Create vhost
  shell: "rabbitmqctl add_vhost '{{ vhost_name }}'"
  when: rabbitmq_vhost_detected | failed

- name: Set user perms
  shell: "rabbitmqctl set_permissions -p {{ vhost_name }} {{ rabbitmq_username }} '.*' '.*' '.*' "
  when: rabbitmq_user_detected | failed
